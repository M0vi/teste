-- Hawk HUB Lib
_Hawk = "ohhahtuhthttouttpwuttuaunbotwo"
local Hawk = loadstring(game:HttpGet("https://raw.githubusercontent.com/TheHanki/HawkHUB/main/LibSources/HawkLib.lua", true))()

-- Criando a janela do Hawk HUB
local Window = Hawk:Window({
	ScriptName = "Hawk HUB",
	DestroyIfExists = true, -- Se falso, a GUI não desaparecerá
	Theme = "Dark" -- Temas disponíveis: Pink, White, Dark
})

-- Criando o botão de Fechar
Window:Close({
	visibility = true, -- Se falso, o botão de fechar desaparecerá
	Callback = function()
		Window:Destroy() -- Função para destruir a GUI
	end,
})

-- Criando o botão de Minimizar
Window:Minimize({
	visibility = true, -- Se falso, o botão de minimizar desaparecerá
	OpenButton = true, -- O botão de abrir estará visível
	Callback = function()
		-- Aqui você pode adicionar qualquer funcionalidade desejada para o botão de minimizar
	end,
})

-- Criando a aba do Hitbox Expander
local hitboxTab = Window:Tab("Hitbox Expander")

-- Variáveis globais de controle
local debounce = false
local defaultProperties = {}
local playerChar = game.Players.LocalPlayer.Character

-- Função para configurar propriedades do hitbox
local function setup(part)
	defaultProperties[part.Name] = {}
	local properties = defaultProperties[part.Name]
	properties.Size = part.Size
	properties.Transparency = part.Transparency
	properties.Massless = part.Massless
	properties.CanCollide = part.CanCollide
	properties.CollisionGroupId = part.CollisionGroupId
	
	-- Hooks para propriedades
	local getSizeHook = part:AddGetHook("Size", properties.Size)
	local getTransparencyHook = part:AddGetHook("Transparency", properties.Transparency)
	local getMasslessHook = part:AddGetHook("Massless", properties.Massless)
	local getCanCollideHook = part:AddGetHook("CanCollide", properties.CanCollide)
	
	local setSizeHook = part:AddSetHook("Size", function(_, value)
		properties.Size = value
		getSizeHook:Modify("Size", properties.Size)
		if Toggles.extenderToggled.Value then
			local size = Options.extenderSize.Value
			return Vector3.new(size, size, size)
		end
		return properties.Size
	end)
	
	local setTransparencyHook = part:AddSetHook("Transparency", function(_, value)
		properties.Transparency = value
		getTransparencyHook:Modify("Transparency", properties.Transparency)
		if Toggles.extenderToggled.Value then
			return Options.extenderTransparency.Value
		end
		return properties.Transparency
	end)
	
	local setMasslessHook = part:AddSetHook("Massless", function(_, value)
		properties.Massless = value
		getMasslessHook:Modify("Massless", properties.Massless)
		if Toggles.extenderToggled.Value then
			if part.Name ~= "HumanoidRootPart" then
				return true
			end
		end
		return properties.Massless
	end)
	
	local setCanCollideHook = part:AddSetHook("CanCollide", function(_, value)
		properties.CanCollide = value
		getCanCollideHook:Modify("CanCollide", properties.CanCollide)
		if Toggles.extenderToggled.Value and not Toggles.collisionsToggled.Value then
			if part.Name == "Head" or part.Name == "HumanoidRootPart" then
				return false
			end
		end
		return properties.CanCollide
	end)

	-- Detectando alterações nas partes
	local changed = part.Changed:Connect(function(property)
		if debounce then return end
		if properties[property] then
			if properties[property] ~= part[property] then
				properties[property] = part[property]
			end
			playerIdx:Update()
		end
	end)
	
	-- Desconectando quando a parte for destruída
	part.Destroying:Connect(function()
		getSizeHook:Remove()
		getTransparencyHook:Remove()
		getMasslessHook:Remove()
		getCanCollideHook:Remove()
		setSizeHook:Remove()
		setTransparencyHook:Remove()
		setMasslessHook:Remove()
		setCanCollideHook:Remove()
		changed:Disconnect()
	end)
end

-- Função para verificar se a parte está ativa
local function isActive(part)
	local name = part.Name
	for _, v in pairs(Options.extenderPartList:GetActiveValues()) do
		if string.match(name, v) or (v == "Custom Part" and string.match(name, Options.customPartName.Value)) or
		(v == "Left Arm" and string.match(name, "Left") and (string.match(name, "Arm") or string.match(name, "Hand"))) or
		(v == "Right Arm" and string.match(name, "Right") and (string.match(name, "Arm") or string.match(name, "Hand"))) or
		(v == "Left Leg" and string.match(name, "Left") and (string.match(name, "Leg") or string.match(name, "Foot"))) or
		(v == "Right Leg" and string.match(name, "Right") and (string.match(name, "Leg") or string.match(name, "Foot"))) then
			return true
		end
	end
	return false
end

-- Função para redimensionar as partes
local function resize(part)
	if not defaultProperties[part.Name] then
		setup(part)
	end
	if Toggles.extenderToggled.Value and isActive(part) and not isIgnored() and not isSitting() and not isFFed() and not isDead() then
		if part.Name ~= "HumanoidRootPart" then
			part.Massless = true
		end
		if not Toggles.collisionsToggled.Value then
			part.CanCollide = false
		else
			part.CanCollide = defaultProperties[part.Name].CanCollide
		end
		local size = Options.extenderSize.Value
		part.Size = Vector3.new(size, size, size)
		part.Transparency = Options.extenderTransparency.Value
		if part.Name == "Head" then
			local face = part:FindFirstChild("face")
			if face then
				face.Transparency = Options.extenderTransparency.Value
			end
		end
	else
		part.Massless = defaultProperties[part.Name].Massless
		part.CanCollide = defaultProperties[part.Name].CanCollide
		part.Size = defaultProperties[part.Name].Size
		part.Transparency = defaultProperties[part.Name].Transparency
		if part.Name == "Head" then
			local face = part:FindFirstChild("face")
			if face then
				face.Transparency = defaultProperties["Head"].Transparency
			end
		end
	end
end

-- Função para atualizar as propriedades do jogador
function playerIdx:Update()
	if not playerChar then return end
	debounce = true
	for _, v in pairs(playerChar:GetChildren()) do
		if v:IsA("BasePart") then
			resize(v)
		end
	end
	debounce = false
end

-- Criando o Toggle para ativar/desativar o Hitbox Expander
hitboxTab:Toggle("Ativar Hitbox Expander", function(value)
	Toggles.extenderToggled.Value = value
	playerIdx:Update()
end)

-- Slider para ajustar o tamanho da hitbox
hitboxTab:Slider("Tamanho da Hitbox", 1, 100, Options.extenderSize.Value, function(value)
	Options.extenderSize.Value = value
	playerIdx:Update()
end)

-- Toggle para ativar/desativar colisão
hitboxTab:Toggle("Ativar Colisão", function(value)
	Toggles.collisionsToggled.Value = value
	playerIdx:Update()
end)

-- Slider para ajustar a transparência da hitbox
hitboxTab:Slider("Transparência da Hitbox", 0, 1, Options.extenderTransparency.Value, function(value)
	Options.extenderTransparency.Value = value
	playerIdx:Update()
end)

-- Atualizar a UI
Window:Update()
